generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model employee {
  id            Int            @id @default(autoincrement())
  first_name    String         @db.VarChar(255)
  last_name     String         @db.VarChar(255)
  birth_date    DateTime       @default(now()) @db.Date
  email         String         @db.VarChar(255)
  gender        String         @db.VarChar(255)
  address       String         @db.VarChar(255)
  username      String         @db.VarChar(255)
  password      String         @db.VarChar(255)
  auth          Int
  dep_id        Int
  date_employed DateTime       @db.Date
  phone         String         @db.VarChar(255)
  status        String         @db.VarChar(255)
  approval_docs approval_doc[]
  dep_appr1     dep_appr[]     @relation("first_appr")
  dep_appr2     dep_appr[]     @relation("second_appr")
  hod           department[]   @relation("hod")
  dep           department     @relation(fields: [dep_id], references: [id])
  time_record   time_record[]

  @@index([dep_id], map: "employee_dep_id_fkey")
}

model department {
  id           Int            @id @default(autoincrement())
  dep_name     String         @db.VarChar(255)
  head_dep     Int
  approval_doc approval_doc[]
  dep_appr     dep_appr?
  hod          employee       @relation("hod", fields: [head_dep], references: [id])
  employee     employee[]

  @@index([head_dep], map: "department_head_dep_fkey")
}

model dep_appr {
  id          Int        @id @default(autoincrement())
  dep_id      Int        @unique
  first_appr  Int
  second_appr Int
  dep         department @relation(fields: [dep_id], references: [id])
  emp1_appr   employee   @relation("first_appr", fields: [first_appr], references: [id])
  emp2_appr   employee   @relation("second_appr", fields: [second_appr], references: [id])

  @@index([first_appr], map: "dep_appr_first_appr_fkey")
  @@index([second_appr], map: "dep_appr_second_appr_fkey")
}

model leave_type {
  id            Int             @id @default(autoincrement())
  type_name     String          @db.VarChar(255)
  approval_doc  approval_doc[]
  type_quantity type_quantity[]
}

model type_quantity {
  id       Int        @id @default(autoincrement())
  type_id  Int
  year_id  Int
  quantity Int
  type     leave_type @relation(fields: [type_id], references: [id])
  year     day_off    @relation(fields: [year_id], references: [id])

  @@index([type_id], map: "type_quantity_type_id_fkey")
  @@index([year_id], map: "type_quantity_year_id_fkey")
}

model approval_doc {
  id             Int        @id @default(autoincrement())
  emp_id         Int
  dep_id         Int
  type_id        Int
  start_date     DateTime   @db.DateTime(0)
  end_date       DateTime   @db.DateTime(0)
  reason         String     @db.VarChar(255)
  written_place  String     @db.VarChar(255)
  backup_contact String     @db.VarChar(255)
  attachment     String     @db.VarChar(255)
  status         String     @db.VarChar(255)
  dep            department @relation(fields: [dep_id], references: [id])
  emp            employee   @relation(fields: [emp_id], references: [id])
  type           leave_type @relation(fields: [type_id], references: [id])

  @@index([dep_id], map: "approval_doc_dep_id_fkey")
  @@index([emp_id], map: "approval_doc_emp_id_fkey")
  @@index([type_id], map: "approval_doc_type_id_fkey")
}

model time_record {
  id          Int       @id @default(autoincrement())
  emp_id      Int
  date        DateTime  @db.Date
  clock_in    DateTime  @db.Time(0)
  clock_out   DateTime? @db.Time(0)
  total_hours Decimal?  @db.Decimal(4, 2)
  emp         employee  @relation(fields: [emp_id], references: [id])

  @@index([emp_id], map: "time_record_emp_id_fkey")
}

model holiday {
  id         Int       @id @default(autoincrement())
  name       String    @db.VarChar(255)
  start_date DateTime  @unique @db.Date
  end_date   DateTime? @unique @db.Date
}

model day_off {
  id            Int             @id @default(autoincrement())
  service_year  Int
  day_amount    Int
  type_quantity type_quantity[]
}
